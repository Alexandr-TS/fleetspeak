// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/client/proto/fleetspeak_client/client.proto

package fleetspeak_client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Parameters used to configure communicator plugins.
type CommunicatorConfig struct {
	// The longest possible wait before attempting to contact the server.
	// The communicator may poll sooner if there are messages for the server.
	MaxPollDelaySeconds int32 `protobuf:"varint,2,opt,name=max_poll_delay_seconds,json=maxPollDelaySeconds" json:"max_poll_delay_seconds,omitempty"`
	// The longest possible wait before attempting to contact the server when
	// there is some data to transmit. The communicator may poll sooner if the
	// buffer is full.
	MaxBufferDelaySeconds int32 `protobuf:"varint,3,opt,name=max_buffer_delay_seconds,json=maxBufferDelaySeconds" json:"max_buffer_delay_seconds,omitempty"`
	// The minimum time to wait after a failure to reach any server.
	MinFailureDelaySeconds int32 `protobuf:"varint,4,opt,name=min_failure_delay_seconds,json=minFailureDelaySeconds" json:"min_failure_delay_seconds,omitempty"`
}

func (m *CommunicatorConfig) Reset()                    { *m = CommunicatorConfig{} }
func (m *CommunicatorConfig) String() string            { return proto.CompactTextString(m) }
func (*CommunicatorConfig) ProtoMessage()               {}
func (*CommunicatorConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CommunicatorConfig) GetMaxPollDelaySeconds() int32 {
	if m != nil {
		return m.MaxPollDelaySeconds
	}
	return 0
}

func (m *CommunicatorConfig) GetMaxBufferDelaySeconds() int32 {
	if m != nil {
		return m.MaxBufferDelaySeconds
	}
	return 0
}

func (m *CommunicatorConfig) GetMinFailureDelaySeconds() int32 {
	if m != nil {
		return m.MinFailureDelaySeconds
	}
	return 0
}

// ClientState contains the state of the client which should be persisted across
// restarts.
type ClientState struct {
	// The client key, normally fixed after first execution. Also defines the
	// client's id.
	ClientKey []byte `protobuf:"bytes,1,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// The most recent sequencing nonce received from the server.
	SequencingNonce uint64 `protobuf:"varint,7,opt,name=sequencing_nonce,json=sequencingNonce" json:"sequencing_nonce,omitempty"`
	// A set of revoked/blacklisted certificate serial numbers in big endian
	// format. Not restricted, but normally at most 20 bytes. (RFC 3280)
	RevokedCertSerials [][]byte `protobuf:"bytes,8,rep,name=revoked_cert_serials,json=revokedCertSerials,proto3" json:"revoked_cert_serials,omitempty"`
}

func (m *ClientState) Reset()                    { *m = ClientState{} }
func (m *ClientState) String() string            { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()               {}
func (*ClientState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ClientState) GetClientKey() []byte {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

func (m *ClientState) GetSequencingNonce() uint64 {
	if m != nil {
		return m.SequencingNonce
	}
	return 0
}

func (m *ClientState) GetRevokedCertSerials() [][]byte {
	if m != nil {
		return m.RevokedCertSerials
	}
	return nil
}

func init() {
	proto.RegisterType((*CommunicatorConfig)(nil), "fleetspeak.client.CommunicatorConfig")
	proto.RegisterType((*ClientState)(nil), "fleetspeak.client.ClientState")
}

func init() {
	proto.RegisterFile("fleetspeak/src/client/proto/fleetspeak_client/client.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0x4f, 0x4b, 0xfb, 0x30,
	0x1c, 0xc7, 0x71, 0xf2, 0xdb, 0x7e, 0xfe, 0x89, 0x03, 0x35, 0xea, 0xa8, 0x07, 0xa1, 0xec, 0x54,
	0x2f, 0xab, 0xb0, 0x83, 0xe8, 0xd1, 0x8a, 0x17, 0x41, 0xa4, 0x7b, 0x00, 0x21, 0xcb, 0xbe, 0x1d,
	0x61, 0xf9, 0x53, 0x93, 0x54, 0xda, 0x87, 0xe0, 0x83, 0xf2, 0xb9, 0x49, 0x93, 0x41, 0x75, 0xa7,
	0xc0, 0xe7, 0xc5, 0xfb, 0xf0, 0x0d, 0x7e, 0xac, 0x24, 0x80, 0x77, 0x35, 0xb0, 0x6d, 0xee, 0x2c,
	0xcf, 0xb9, 0x14, 0xa0, 0x7d, 0x5e, 0x5b, 0xe3, 0x4d, 0x3e, 0x18, 0xdd, 0xed, 0xf1, 0x99, 0x07,
	0x26, 0xe7, 0x83, 0xcf, 0x23, 0xcc, 0xbe, 0x11, 0x26, 0x85, 0x51, 0xaa, 0xd1, 0x82, 0x33, 0x6f,
	0x6c, 0x61, 0x74, 0x25, 0x36, 0x64, 0x81, 0xa7, 0x8a, 0xb5, 0xb4, 0x36, 0x52, 0xd2, 0x35, 0x48,
	0xd6, 0x51, 0x07, 0xdc, 0xe8, 0xb5, 0x4b, 0xfe, 0xa5, 0x28, 0xfb, 0x5f, 0x5e, 0x28, 0xd6, 0xbe,
	0x1b, 0x29, 0x9f, 0x7b, 0x5b, 0x46, 0x22, 0xf7, 0x38, 0xe9, 0xa3, 0x55, 0x53, 0x55, 0x60, 0xf7,
	0xb2, 0x51, 0xc8, 0xae, 0x14, 0x6b, 0x9f, 0x02, 0xff, 0x09, 0x1f, 0xf0, 0xb5, 0x12, 0x9a, 0x56,
	0x4c, 0xc8, 0xc6, 0xc2, 0x5e, 0x39, 0x0e, 0xe5, 0x54, 0x09, 0xfd, 0x12, 0xfd, 0x77, 0x3a, 0xfb,
	0x42, 0xf8, 0xa4, 0x08, 0xa7, 0x2c, 0x3d, 0xf3, 0x40, 0x6e, 0x30, 0x8e, 0x97, 0xd1, 0x2d, 0x74,
	0x09, 0x4a, 0x51, 0x36, 0x29, 0x8f, 0xe3, 0xf2, 0x0a, 0x1d, 0xb9, 0xc5, 0x67, 0x0e, 0x3e, 0x1a,
	0xd0, 0x5c, 0xe8, 0x0d, 0xd5, 0x46, 0x73, 0x48, 0x0e, 0x53, 0x94, 0x8d, 0xcb, 0xd3, 0x61, 0x7f,
	0xeb, 0x67, 0x72, 0x87, 0x2f, 0x2d, 0x7c, 0x9a, 0x2d, 0xac, 0x29, 0x07, 0xeb, 0xa9, 0x03, 0x2b,
	0x98, 0x74, 0xc9, 0x51, 0x3a, 0xca, 0x26, 0x25, 0xd9, 0x59, 0x01, 0xd6, 0x2f, 0xa3, 0xac, 0x0e,
	0xc2, 0x2f, 0x2f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x92, 0x31, 0xe4, 0xe7, 0xa3, 0x01, 0x00,
	0x00,
}
