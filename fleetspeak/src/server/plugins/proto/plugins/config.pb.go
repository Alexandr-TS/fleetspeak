// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/server/plugins/proto/plugins/config.proto

/*
Package fleetspeak_plugins is a generated protocol buffer package.

It is generated from these files:
	fleetspeak/src/server/plugins/proto/plugins/config.proto

It has these top-level messages:
	Plugin
	Config
	HttpsConfig
*/
package fleetspeak_plugins

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A Plugin message describes how to instantiate a FS component from a go plugin
// file, as defined by go's plugin library: https://golang.org/pkg/plugin/
type Plugin struct {
	// The full path to the plugin file containing this component.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// The name of a factory function exported by the file. It will be passed the
	// config string and must be one of the *Factory types defined in the
	// Fleetspeak server.plugins package.
	FactoryName string `protobuf:"bytes,2,opt,name=factory_name,json=factoryName" json:"factory_name,omitempty"`
	Config      string `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *Plugin) Reset()                    { *m = Plugin{} }
func (m *Plugin) String() string            { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()               {}
func (*Plugin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Plugin) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Plugin) GetFactoryName() string {
	if m != nil {
		return m.FactoryName
	}
	return ""
}

func (m *Plugin) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type Config struct {
	Datastore      *Plugin   `protobuf:"bytes,1,opt,name=datastore" json:"datastore,omitempty"`
	ServiceFactory []*Plugin `protobuf:"bytes,2,rep,name=service_factory,json=serviceFactory" json:"service_factory,omitempty"`
	Communicator   []*Plugin `protobuf:"bytes,3,rep,name=communicator" json:"communicator,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Config) GetDatastore() *Plugin {
	if m != nil {
		return m.Datastore
	}
	return nil
}

func (m *Config) GetServiceFactory() []*Plugin {
	if m != nil {
		return m.ServiceFactory
	}
	return nil
}

func (m *Config) GetCommunicator() []*Plugin {
	if m != nil {
		return m.Communicator
	}
	return nil
}

type HttpsConfig struct {
	// The bind address to listen for connections on, e.g. ":443" or "localhost:1234".
	ListenAddress string `protobuf:"bytes,1,opt,name=listen_address,json=listenAddress" json:"listen_address,omitempty"`
	// A certificate chain which identifies the server to clients. x509 format.
	Certificate string `protobuf:"bytes,2,opt,name=certificate" json:"certificate,omitempty"`
	// The private key used to identify the server. Must match the first entry in
	// certificates. x509 format.
	Key string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// If set includes support for streaming connections to clients.
	Streaming bool `protobuf:"varint,4,opt,name=streaming" json:"streaming,omitempty"`
}

func (m *HttpsConfig) Reset()                    { *m = HttpsConfig{} }
func (m *HttpsConfig) String() string            { return proto.CompactTextString(m) }
func (*HttpsConfig) ProtoMessage()               {}
func (*HttpsConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HttpsConfig) GetListenAddress() string {
	if m != nil {
		return m.ListenAddress
	}
	return ""
}

func (m *HttpsConfig) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *HttpsConfig) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HttpsConfig) GetStreaming() bool {
	if m != nil {
		return m.Streaming
	}
	return false
}

func init() {
	proto.RegisterType((*Plugin)(nil), "fleetspeak.plugins.Plugin")
	proto.RegisterType((*Config)(nil), "fleetspeak.plugins.Config")
	proto.RegisterType((*HttpsConfig)(nil), "fleetspeak.plugins.HttpsConfig")
}

func init() {
	proto.RegisterFile("fleetspeak/src/server/plugins/proto/plugins/config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0x33, 0x31,
	0x10, 0xc6, 0xd9, 0x6e, 0x59, 0xde, 0xce, 0xf6, 0xad, 0x32, 0x07, 0x09, 0xe2, 0x61, 0x2d, 0x08,
	0x3d, 0xed, 0x82, 0x5e, 0x7a, 0x12, 0xa4, 0x20, 0x9e, 0x44, 0x7a, 0xf1, 0x58, 0x62, 0x3a, 0x5b,
	0x43, 0xbb, 0xc9, 0x92, 0x4c, 0x85, 0x7e, 0x01, 0xbf, 0x9a, 0x5f, 0x4b, 0x9a, 0x0d, 0xad, 0xe2,
	0xa1, 0xb7, 0x27, 0xbf, 0x99, 0x67, 0xfe, 0x05, 0xa6, 0xf5, 0x86, 0x88, 0x7d, 0x4b, 0x72, 0x5d,
	0x79, 0xa7, 0x2a, 0x4f, 0xee, 0x83, 0x5c, 0xd5, 0x6e, 0xb6, 0x2b, 0x6d, 0x7c, 0xd5, 0x3a, 0xcb,
	0xf6, 0xf0, 0x52, 0xd6, 0xd4, 0x7a, 0x55, 0x06, 0x88, 0x78, 0x74, 0x96, 0x31, 0x61, 0xfc, 0x0a,
	0xd9, 0x4b, 0x90, 0x88, 0xd0, 0x6f, 0x25, 0xbf, 0x8b, 0xa4, 0x48, 0x26, 0x83, 0x79, 0xd0, 0x78,
	0x0d, 0xc3, 0x5a, 0x2a, 0xb6, 0x6e, 0xb7, 0x30, 0xb2, 0x21, 0xd1, 0x0b, 0xb1, 0x3c, 0xb2, 0x67,
	0xd9, 0x10, 0x5e, 0x40, 0xd6, 0x35, 0x11, 0x69, 0x08, 0xc6, 0xd7, 0xf8, 0x2b, 0x81, 0x6c, 0x16,
	0x24, 0x4e, 0x61, 0xb0, 0x94, 0x2c, 0x3d, 0x5b, 0x47, 0xa1, 0x7c, 0x7e, 0x7b, 0x59, 0xfe, 0x9d,
	0xa5, 0xec, 0x06, 0x99, 0x1f, 0x93, 0x71, 0x06, 0x67, 0xfb, 0xf5, 0xb4, 0xa2, 0x45, 0xec, 0x29,
	0x7a, 0x45, 0x7a, 0xc2, 0x3f, 0x8a, 0x96, 0xc7, 0xce, 0x81, 0xf7, 0x30, 0x54, 0xb6, 0x69, 0xb6,
	0x46, 0x2b, 0xc9, 0xd6, 0x89, 0xf4, 0x64, 0x85, 0x5f, 0xf9, 0xe3, 0xcf, 0x04, 0xf2, 0x27, 0xe6,
	0xd6, 0xc7, 0x75, 0x6e, 0x60, 0xb4, 0xd1, 0x9e, 0xc9, 0x2c, 0xe4, 0x72, 0xe9, 0xc8, 0xfb, 0x78,
	0xb2, 0xff, 0x1d, 0x7d, 0xe8, 0x20, 0x16, 0x90, 0x2b, 0x72, 0xac, 0xeb, 0x7d, 0x99, 0xc3, 0xe9,
	0x7e, 0x20, 0x3c, 0x87, 0x74, 0x4d, 0xbb, 0x78, 0xb7, 0xbd, 0xc4, 0x2b, 0x18, 0x78, 0x76, 0x24,
	0x1b, 0x6d, 0x56, 0xa2, 0x5f, 0x24, 0x93, 0x7f, 0xf3, 0x23, 0x78, 0xcb, 0xc2, 0x37, 0xde, 0x7d,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x5c, 0x75, 0x2a, 0x02, 0x02, 0x00, 0x00,
}
