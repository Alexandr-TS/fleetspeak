// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/server/proto/fleetspeak_server/admin.proto

/*
Package fleetspeak_server is a generated protocol buffer package.

It is generated from these files:
	fleetspeak/src/server/proto/fleetspeak_server/admin.proto
	fleetspeak/src/server/proto/fleetspeak_server/broadcasts.proto
	fleetspeak/src/server/proto/fleetspeak_server/resource.proto
	fleetspeak/src/server/proto/fleetspeak_server/server.proto
	fleetspeak/src/server/proto/fleetspeak_server/services.proto

It has these top-level messages:
	CreateBroadcastRequest
	ListActiveBroadcastsRequest
	ListActiveBroadcastsResponse
	ListClientsRequest
	ListClientsResponse
	Client
	GetMessageStatusRequest
	GetMessageStatusResponse
	StoreFileRequest
	ListClientContactsRequest
	ListClientContactsResponse
	ClientContact
	BlacklistClientRequest
	Broadcast
	ClientResourceUsageRecord
	ServerConfig
	ServiceConfig
*/
package fleetspeak_server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import fleetspeak "github.com/google/fleetspeak/fleetspeak/src/common/proto/fleetspeak"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateBroadcastRequest struct {
	Broadcast *Broadcast `protobuf:"bytes,1,opt,name=broadcast" json:"broadcast,omitempty"`
	Limit     uint64     `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *CreateBroadcastRequest) Reset()                    { *m = CreateBroadcastRequest{} }
func (m *CreateBroadcastRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBroadcastRequest) ProtoMessage()               {}
func (*CreateBroadcastRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateBroadcastRequest) GetBroadcast() *Broadcast {
	if m != nil {
		return m.Broadcast
	}
	return nil
}

func (m *CreateBroadcastRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListActiveBroadcastsRequest struct {
	// If set, only return broadcasts with the given service_name.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
}

func (m *ListActiveBroadcastsRequest) Reset()                    { *m = ListActiveBroadcastsRequest{} }
func (m *ListActiveBroadcastsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListActiveBroadcastsRequest) ProtoMessage()               {}
func (*ListActiveBroadcastsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListActiveBroadcastsRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type ListActiveBroadcastsResponse struct {
	Broadcasts []*Broadcast `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
}

func (m *ListActiveBroadcastsResponse) Reset()                    { *m = ListActiveBroadcastsResponse{} }
func (m *ListActiveBroadcastsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListActiveBroadcastsResponse) ProtoMessage()               {}
func (*ListActiveBroadcastsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListActiveBroadcastsResponse) GetBroadcasts() []*Broadcast {
	if m != nil {
		return m.Broadcasts
	}
	return nil
}

type ListClientsRequest struct {
	// If non-empty, restricts results to the listed client_ids. If empty, all
	// clients known to the system will be listed.
	ClientIds [][]byte `protobuf:"bytes,1,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
}

func (m *ListClientsRequest) Reset()                    { *m = ListClientsRequest{} }
func (m *ListClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListClientsRequest) ProtoMessage()               {}
func (*ListClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListClientsRequest) GetClientIds() [][]byte {
	if m != nil {
		return m.ClientIds
	}
	return nil
}

type ListClientsResponse struct {
	Clients []*Client `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
}

func (m *ListClientsResponse) Reset()                    { *m = ListClientsResponse{} }
func (m *ListClientsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListClientsResponse) ProtoMessage()               {}
func (*ListClientsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListClientsResponse) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type Client struct {
	ClientId           []byte                     `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Labels             []*fleetspeak.Label        `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty"`
	LastContactTime    *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=last_contact_time,json=lastContactTime" json:"last_contact_time,omitempty"`
	LastContactAddress string                     `protobuf:"bytes,4,opt,name=last_contact_address,json=lastContactAddress" json:"last_contact_address,omitempty"`
	LastClock          *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=last_clock,json=lastClock" json:"last_clock,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Client) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *Client) GetLabels() []*fleetspeak.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Client) GetLastContactTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastContactTime
	}
	return nil
}

func (m *Client) GetLastContactAddress() string {
	if m != nil {
		return m.LastContactAddress
	}
	return ""
}

func (m *Client) GetLastClock() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastClock
	}
	return nil
}

type GetMessageStatusRequest struct {
	MessageId []byte `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *GetMessageStatusRequest) Reset()                    { *m = GetMessageStatusRequest{} }
func (m *GetMessageStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMessageStatusRequest) ProtoMessage()               {}
func (*GetMessageStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetMessageStatusRequest) GetMessageId() []byte {
	if m != nil {
		return m.MessageId
	}
	return nil
}

type GetMessageStatusResponse struct {
	CreationTime *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Result       *fleetspeak.MessageResult  `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *GetMessageStatusResponse) Reset()                    { *m = GetMessageStatusResponse{} }
func (m *GetMessageStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMessageStatusResponse) ProtoMessage()               {}
func (*GetMessageStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetMessageStatusResponse) GetCreationTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *GetMessageStatusResponse) GetResult() *fleetspeak.MessageResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type StoreFileRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	FileName    string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	Data        []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StoreFileRequest) Reset()                    { *m = StoreFileRequest{} }
func (m *StoreFileRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreFileRequest) ProtoMessage()               {}
func (*StoreFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StoreFileRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *StoreFileRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *StoreFileRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ListClientContactsRequest struct {
	ClientId []byte `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *ListClientContactsRequest) Reset()                    { *m = ListClientContactsRequest{} }
func (m *ListClientContactsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListClientContactsRequest) ProtoMessage()               {}
func (*ListClientContactsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListClientContactsRequest) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

type ListClientContactsResponse struct {
	Contacts []*ClientContact `protobuf:"bytes,1,rep,name=contacts" json:"contacts,omitempty"`
}

func (m *ListClientContactsResponse) Reset()                    { *m = ListClientContactsResponse{} }
func (m *ListClientContactsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListClientContactsResponse) ProtoMessage()               {}
func (*ListClientContactsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListClientContactsResponse) GetContacts() []*ClientContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

type ClientContact struct {
	SentNonce       uint64                     `protobuf:"fixed64,1,opt,name=sent_nonce,json=sentNonce" json:"sent_nonce,omitempty"`
	ReceivedNonce   uint64                     `protobuf:"fixed64,2,opt,name=received_nonce,json=receivedNonce" json:"received_nonce,omitempty"`
	ObservedAddress string                     `protobuf:"bytes,3,opt,name=observed_address,json=observedAddress" json:"observed_address,omitempty"`
	Timestamp       *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ClientContact) Reset()                    { *m = ClientContact{} }
func (m *ClientContact) String() string            { return proto.CompactTextString(m) }
func (*ClientContact) ProtoMessage()               {}
func (*ClientContact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ClientContact) GetSentNonce() uint64 {
	if m != nil {
		return m.SentNonce
	}
	return 0
}

func (m *ClientContact) GetReceivedNonce() uint64 {
	if m != nil {
		return m.ReceivedNonce
	}
	return 0
}

func (m *ClientContact) GetObservedAddress() string {
	if m != nil {
		return m.ObservedAddress
	}
	return ""
}

func (m *ClientContact) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type BlacklistClientRequest struct {
	ClientId []byte `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *BlacklistClientRequest) Reset()                    { *m = BlacklistClientRequest{} }
func (m *BlacklistClientRequest) String() string            { return proto.CompactTextString(m) }
func (*BlacklistClientRequest) ProtoMessage()               {}
func (*BlacklistClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BlacklistClientRequest) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateBroadcastRequest)(nil), "fleetspeak.server.CreateBroadcastRequest")
	proto.RegisterType((*ListActiveBroadcastsRequest)(nil), "fleetspeak.server.ListActiveBroadcastsRequest")
	proto.RegisterType((*ListActiveBroadcastsResponse)(nil), "fleetspeak.server.ListActiveBroadcastsResponse")
	proto.RegisterType((*ListClientsRequest)(nil), "fleetspeak.server.ListClientsRequest")
	proto.RegisterType((*ListClientsResponse)(nil), "fleetspeak.server.ListClientsResponse")
	proto.RegisterType((*Client)(nil), "fleetspeak.server.Client")
	proto.RegisterType((*GetMessageStatusRequest)(nil), "fleetspeak.server.GetMessageStatusRequest")
	proto.RegisterType((*GetMessageStatusResponse)(nil), "fleetspeak.server.GetMessageStatusResponse")
	proto.RegisterType((*StoreFileRequest)(nil), "fleetspeak.server.StoreFileRequest")
	proto.RegisterType((*ListClientContactsRequest)(nil), "fleetspeak.server.ListClientContactsRequest")
	proto.RegisterType((*ListClientContactsResponse)(nil), "fleetspeak.server.ListClientContactsResponse")
	proto.RegisterType((*ClientContact)(nil), "fleetspeak.server.ClientContact")
	proto.RegisterType((*BlacklistClientRequest)(nil), "fleetspeak.server.BlacklistClientRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Admin service

type AdminClient interface {
	// CreateBroadcast creates a FS broadcast, potentially sending a message to
	// many machines in the fleet.
	CreateBroadcast(ctx context.Context, in *CreateBroadcastRequest, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error)
	// ListActiveBroadcasts lists the currently active FS broadcasts.
	ListActiveBroadcasts(ctx context.Context, in *ListActiveBroadcastsRequest, opts ...grpc.CallOption) (*ListActiveBroadcastsResponse, error)
	// ListClients lists the currently active FS clients.
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	// ListClientContacts lists the contact history for a client.
	ListClientContacts(ctx context.Context, in *ListClientContactsRequest, opts ...grpc.CallOption) (*ListClientContactsResponse, error)
	// GetMessageStatus retrieves the current status of a message.
	GetMessageStatus(ctx context.Context, in *GetMessageStatusRequest, opts ...grpc.CallOption) (*GetMessageStatusResponse, error)
	// InsertMessage inserts a message into the Fleetspeak system to be processed
	// by the server or delivered to a client.
	// TODO: Have this method return the message that is written to the
	// datastore (or at least the id).
	InsertMessage(ctx context.Context, in *fleetspeak.Message, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error)
	// StoreFile inserts a file into the Fleetspeak system.
	StoreFile(ctx context.Context, in *StoreFileRequest, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error)
	// KeepAlive does as little as possible.
	KeepAlive(ctx context.Context, in *fleetspeak.EmptyMessage, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error)
	// BlacklistClient marks a client_id as invalid, forcing all Fleetspeak
	// clients using it to rekey.
	BlacklistClient(ctx context.Context, in *BlacklistClientRequest, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) CreateBroadcast(ctx context.Context, in *CreateBroadcastRequest, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error) {
	out := new(fleetspeak.EmptyMessage)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/CreateBroadcast", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListActiveBroadcasts(ctx context.Context, in *ListActiveBroadcastsRequest, opts ...grpc.CallOption) (*ListActiveBroadcastsResponse, error) {
	out := new(ListActiveBroadcastsResponse)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/ListActiveBroadcasts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/ListClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListClientContacts(ctx context.Context, in *ListClientContactsRequest, opts ...grpc.CallOption) (*ListClientContactsResponse, error) {
	out := new(ListClientContactsResponse)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/ListClientContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMessageStatus(ctx context.Context, in *GetMessageStatusRequest, opts ...grpc.CallOption) (*GetMessageStatusResponse, error) {
	out := new(GetMessageStatusResponse)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/GetMessageStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsertMessage(ctx context.Context, in *fleetspeak.Message, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error) {
	out := new(fleetspeak.EmptyMessage)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/InsertMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StoreFile(ctx context.Context, in *StoreFileRequest, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error) {
	out := new(fleetspeak.EmptyMessage)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/StoreFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) KeepAlive(ctx context.Context, in *fleetspeak.EmptyMessage, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error) {
	out := new(fleetspeak.EmptyMessage)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/KeepAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BlacklistClient(ctx context.Context, in *BlacklistClientRequest, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error) {
	out := new(fleetspeak.EmptyMessage)
	err := grpc.Invoke(ctx, "/fleetspeak.server.Admin/BlacklistClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	// CreateBroadcast creates a FS broadcast, potentially sending a message to
	// many machines in the fleet.
	CreateBroadcast(context.Context, *CreateBroadcastRequest) (*fleetspeak.EmptyMessage, error)
	// ListActiveBroadcasts lists the currently active FS broadcasts.
	ListActiveBroadcasts(context.Context, *ListActiveBroadcastsRequest) (*ListActiveBroadcastsResponse, error)
	// ListClients lists the currently active FS clients.
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	// ListClientContacts lists the contact history for a client.
	ListClientContacts(context.Context, *ListClientContactsRequest) (*ListClientContactsResponse, error)
	// GetMessageStatus retrieves the current status of a message.
	GetMessageStatus(context.Context, *GetMessageStatusRequest) (*GetMessageStatusResponse, error)
	// InsertMessage inserts a message into the Fleetspeak system to be processed
	// by the server or delivered to a client.
	// TODO: Have this method return the message that is written to the
	// datastore (or at least the id).
	InsertMessage(context.Context, *fleetspeak.Message) (*fleetspeak.EmptyMessage, error)
	// StoreFile inserts a file into the Fleetspeak system.
	StoreFile(context.Context, *StoreFileRequest) (*fleetspeak.EmptyMessage, error)
	// KeepAlive does as little as possible.
	KeepAlive(context.Context, *fleetspeak.EmptyMessage) (*fleetspeak.EmptyMessage, error)
	// BlacklistClient marks a client_id as invalid, forcing all Fleetspeak
	// clients using it to rekey.
	BlacklistClient(context.Context, *BlacklistClientRequest) (*fleetspeak.EmptyMessage, error)
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_CreateBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/CreateBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateBroadcast(ctx, req.(*CreateBroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListActiveBroadcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveBroadcastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListActiveBroadcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/ListActiveBroadcasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListActiveBroadcasts(ctx, req.(*ListActiveBroadcastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListClientContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListClientContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/ListClientContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListClientContacts(ctx, req.(*ListClientContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMessageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMessageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/GetMessageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMessageStatus(ctx, req.(*GetMessageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsertMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fleetspeak.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsertMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/InsertMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsertMessage(ctx, req.(*fleetspeak.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/StoreFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StoreFile(ctx, req.(*StoreFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fleetspeak.EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).KeepAlive(ctx, req.(*fleetspeak.EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BlacklistClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BlacklistClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.server.Admin/BlacklistClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BlacklistClient(ctx, req.(*BlacklistClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fleetspeak.server.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBroadcast",
			Handler:    _Admin_CreateBroadcast_Handler,
		},
		{
			MethodName: "ListActiveBroadcasts",
			Handler:    _Admin_ListActiveBroadcasts_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _Admin_ListClients_Handler,
		},
		{
			MethodName: "ListClientContacts",
			Handler:    _Admin_ListClientContacts_Handler,
		},
		{
			MethodName: "GetMessageStatus",
			Handler:    _Admin_GetMessageStatus_Handler,
		},
		{
			MethodName: "InsertMessage",
			Handler:    _Admin_InsertMessage_Handler,
		},
		{
			MethodName: "StoreFile",
			Handler:    _Admin_StoreFile_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _Admin_KeepAlive_Handler,
		},
		{
			MethodName: "BlacklistClient",
			Handler:    _Admin_BlacklistClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fleetspeak/src/server/proto/fleetspeak_server/admin.proto",
}

func init() {
	proto.RegisterFile("fleetspeak/src/server/proto/fleetspeak_server/admin.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x6d, 0x4f, 0xe3, 0x46,
	0x10, 0x26, 0x01, 0x52, 0x3c, 0x24, 0x0d, 0x2c, 0x88, 0x1a, 0x43, 0xd5, 0xd4, 0x15, 0x15, 0xf4,
	0xc5, 0x69, 0x89, 0x2a, 0x41, 0x55, 0xb5, 0x04, 0x54, 0x4e, 0xdc, 0x71, 0x7c, 0x30, 0xf7, 0x01,
	0x9d, 0x4e, 0x17, 0x6d, 0xec, 0x09, 0xf2, 0xe1, 0x97, 0x9c, 0x77, 0x13, 0x89, 0x1f, 0x70, 0x5f,
	0xef, 0x07, 0xdd, 0x7f, 0xb8, 0xff, 0x74, 0xf2, 0xee, 0xda, 0x4e, 0x82, 0xf3, 0x72, 0xdf, 0x60,
	0xe6, 0x79, 0x9e, 0x19, 0xcf, 0x3c, 0x3b, 0x81, 0xd3, 0x9e, 0x8f, 0xc8, 0x59, 0x1f, 0xe9, 0x43,
	0x93, 0xc5, 0x4e, 0x93, 0x61, 0x3c, 0xc4, 0xb8, 0xd9, 0x8f, 0x23, 0x1e, 0x35, 0xf3, 0x5c, 0x47,
	0xc5, 0xa9, 0x1b, 0x78, 0xa1, 0x25, 0xb2, 0x64, 0x33, 0x4f, 0x5b, 0x32, 0x6d, 0xfc, 0x70, 0x1f,
	0x45, 0xf7, 0x3e, 0x4a, 0x7a, 0x77, 0xd0, 0x6b, 0x72, 0x2f, 0x40, 0xc6, 0x69, 0xd0, 0x97, 0x1c,
	0xa3, 0x35, 0x51, 0xce, 0x89, 0x82, 0x20, 0x0a, 0x9f, 0x94, 0x53, 0x71, 0x45, 0xfa, 0xf7, 0xeb,
	0x7a, 0xec, 0xc6, 0x11, 0x75, 0x1d, 0xca, 0x38, 0x93, 0x7c, 0xf3, 0x1d, 0xec, 0x5c, 0xc4, 0x48,
	0x39, 0x9e, 0xa7, 0x19, 0x1b, 0xdf, 0x0f, 0x90, 0x71, 0xf2, 0x37, 0x68, 0x19, 0x5a, 0x2f, 0x35,
	0x4a, 0x87, 0xeb, 0xc7, 0xfb, 0xd6, 0x93, 0xcf, 0xb2, 0x72, 0x5e, 0x0e, 0x27, 0xdb, 0xb0, 0xea,
	0x7b, 0x81, 0xc7, 0xf5, 0x72, 0xa3, 0x74, 0xb8, 0x62, 0xcb, 0x7f, 0xcc, 0x33, 0xd8, 0xbb, 0xf6,
	0x18, 0x6f, 0x3b, 0xdc, 0x1b, 0xe6, 0xf5, 0x58, 0x5a, 0xf0, 0x47, 0xa8, 0x26, 0x9a, 0x9e, 0x83,
	0x9d, 0x90, 0x06, 0x28, 0x6a, 0x6a, 0xf6, 0xba, 0x8a, 0xdd, 0xd0, 0x00, 0xcd, 0x37, 0xb0, 0x5f,
	0xac, 0xc0, 0xfa, 0x51, 0xc8, 0x90, 0xfc, 0x03, 0x90, 0x7f, 0xa1, 0x5e, 0x6a, 0x2c, 0xcf, 0x6d,
	0x7a, 0x04, 0x6f, 0xb6, 0x80, 0x24, 0xea, 0x17, 0xbe, 0x87, 0x61, 0xde, 0xd6, 0xf7, 0x00, 0x8e,
	0x88, 0x74, 0x3c, 0x57, 0x6a, 0x56, 0x6d, 0x4d, 0x46, 0xae, 0x5c, 0x66, 0x3e, 0x87, 0xad, 0x31,
	0x92, 0xea, 0xa4, 0x05, 0xdf, 0x48, 0x4c, 0xda, 0xc6, 0x6e, 0x41, 0x1b, 0x92, 0x64, 0xa7, 0x48,
	0xf3, 0x43, 0x19, 0x2a, 0x32, 0x46, 0xf6, 0x40, 0xcb, 0xaa, 0x8a, 0x49, 0x54, 0xed, 0xb5, 0xb4,
	0x28, 0x39, 0x82, 0x8a, 0x4f, 0xbb, 0xe8, 0x33, 0xbd, 0x2c, 0xb4, 0x37, 0x47, 0xb5, 0xaf, 0x93,
	0x8c, 0xad, 0x00, 0xe4, 0x12, 0x36, 0x7d, 0xca, 0x78, 0xc7, 0x89, 0x42, 0x4e, 0x1d, 0xde, 0x49,
	0x4c, 0xa7, 0x2f, 0x8b, 0x6d, 0x1a, 0x96, 0x74, 0xa4, 0x95, 0x3a, 0xd2, 0x7a, 0x95, 0x3a, 0xd2,
	0xae, 0x27, 0xa4, 0x0b, 0xc9, 0x49, 0xa2, 0xe4, 0x0f, 0xd8, 0x1e, 0xd3, 0xa1, 0xae, 0x1b, 0x23,
	0x63, 0xfa, 0x8a, 0x58, 0x12, 0x19, 0x81, 0xb7, 0x65, 0x86, 0x9c, 0x02, 0x48, 0x86, 0x1f, 0x39,
	0x0f, 0xfa, 0xea, 0xdc, 0x92, 0x9a, 0xd0, 0x48, 0xc0, 0xe6, 0x09, 0x7c, 0xf7, 0x0c, 0xf9, 0x4b,
	0x64, 0x8c, 0xde, 0xe3, 0x2d, 0xa7, 0x7c, 0x30, 0xba, 0x8d, 0x40, 0xc6, 0xf3, 0xc1, 0x68, 0x2a,
	0x72, 0xe5, 0x9a, 0x1f, 0x4b, 0xa0, 0x3f, 0xa5, 0xaa, 0x9d, 0xfc, 0x07, 0x35, 0x27, 0xf1, 0xba,
	0x17, 0x85, 0x72, 0x0e, 0xa5, 0xb9, 0x4d, 0x55, 0x53, 0x82, 0x18, 0xc2, 0x9f, 0x50, 0x89, 0x91,
	0x0d, 0x7c, 0xe9, 0xeb, 0x89, 0x9d, 0xaa, 0x9a, 0xb6, 0x00, 0xd8, 0x0a, 0x68, 0xf6, 0x60, 0xe3,
	0x96, 0x47, 0x31, 0x5e, 0x7a, 0x3e, 0x2e, 0x6e, 0xf4, 0x64, 0xfd, 0x3d, 0xcf, 0x57, 0xf9, 0xb2,
	0xc8, 0xaf, 0x25, 0x01, 0x91, 0x24, 0xb0, 0xe2, 0x52, 0x4e, 0xc5, 0x1a, 0xab, 0xb6, 0xf8, 0xdb,
	0x3c, 0x81, 0xdd, 0xdc, 0x86, 0x6a, 0x13, 0xd9, 0xd0, 0x66, 0x99, 0xc9, 0x7c, 0x0d, 0x46, 0x11,
	0x33, 0x7b, 0x51, 0x6b, 0x6a, 0xe5, 0xa9, 0x91, 0x1b, 0x53, 0x8d, 0xac, 0xc8, 0x76, 0xc6, 0x30,
	0x3f, 0x95, 0xa0, 0x36, 0x96, 0x4b, 0xf6, 0xc7, 0x92, 0x46, 0xc2, 0x28, 0x74, 0xe4, 0x97, 0x57,
	0x6c, 0x2d, 0x89, 0xdc, 0x24, 0x01, 0x72, 0x00, 0xdf, 0xc6, 0xe8, 0xa0, 0x37, 0x44, 0x57, 0x41,
	0xca, 0x02, 0x52, 0x4b, 0xa3, 0x12, 0x76, 0x04, 0x1b, 0x51, 0x57, 0xd4, 0x76, 0x33, 0x27, 0x2e,
	0x8b, 0x29, 0xd5, 0xd3, 0x78, 0x6a, 0xc3, 0x13, 0xd0, 0xb2, 0x43, 0x2b, 0xdc, 0x3a, 0xc7, 0x85,
	0x19, 0xd8, 0xfc, 0x0b, 0x76, 0xce, 0x7d, 0xea, 0x3c, 0xf8, 0xd9, 0x74, 0x16, 0x99, 0xe7, 0xf1,
	0xe7, 0x0a, 0xac, 0xb6, 0x93, 0x9f, 0x02, 0x72, 0x07, 0xf5, 0x89, 0xdb, 0x4a, 0x8e, 0x8a, 0x86,
	0x57, 0x78, 0x7f, 0x0d, 0x7d, 0x14, 0xfa, 0x7f, 0xd0, 0xe7, 0x8f, 0xca, 0x61, 0xe6, 0x12, 0x79,
	0x84, 0xed, 0xa2, 0x3b, 0x48, 0xac, 0x02, 0xf9, 0x19, 0x27, 0xd7, 0x68, 0x2e, 0x8c, 0x97, 0x76,
	0x30, 0x97, 0xc8, 0x5b, 0x58, 0x1f, 0xb9, 0x77, 0xe4, 0x60, 0x8a, 0xc2, 0xf8, 0x11, 0x35, 0x7e,
	0x9e, 0x07, 0xcb, 0xf4, 0xd9, 0xe8, 0x11, 0x4e, 0xed, 0x48, 0x7e, 0x9b, 0xc9, 0x9f, 0xf0, 0xbb,
	0xf1, 0xfb, 0x82, 0xe8, 0xac, 0x68, 0x00, 0x1b, 0x93, 0x57, 0x83, 0xfc, 0x52, 0x20, 0x32, 0xe5,
	0x2a, 0x19, 0xbf, 0x2e, 0x84, 0xcd, 0xca, 0x9d, 0x41, 0xed, 0x2a, 0x64, 0x18, 0xa7, 0x00, 0xb2,
	0x55, 0x70, 0x48, 0x66, 0x1a, 0xe0, 0x1a, 0xb4, 0xec, 0xac, 0x90, 0x9f, 0x0a, 0xaa, 0x4f, 0x1e,
	0x9d, 0x99, 0x6a, 0x6d, 0xd0, 0x5e, 0x20, 0xf6, 0xdb, 0xbe, 0x37, 0x44, 0x32, 0x15, 0x38, 0x53,
	0xe2, 0x0e, 0xea, 0x13, 0x8f, 0xa5, 0xd0, 0xeb, 0xc5, 0x0f, 0x6a, 0x96, 0x72, 0xb7, 0x22, 0x5e,
	0x69, 0xeb, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x42, 0xcc, 0x41, 0x8e, 0x09, 0x00, 0x00,
}
