// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/common/proto/fleetspeak_monitoring/resource.proto

/*
Package fleetspeak_monitoring is a generated protocol buffer package.

It is generated from these files:
	fleetspeak/src/common/proto/fleetspeak_monitoring/resource.proto

It has these top-level messages:
	ResourceUsage
	ResourceUsageData
*/
package fleetspeak_monitoring

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Resource usage information about a process. This is intended to be used to
// report service resource usage to FS servers. For stdin services,
// ResourceUsage is reported back together with its processes' output when they
// finish execution.
type ResourceUsage struct {
	UserTime   *google_protobuf.Duration   `protobuf:"bytes,1,opt,name=user_time,json=userTime" json:"user_time,omitempty"`
	SystemTime *google_protobuf.Duration   `protobuf:"bytes,2,opt,name=system_time,json=systemTime" json:"system_time,omitempty"`
	Timestamp  *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Maximum resident set size in bytes. For stdin services, this is
	// struct rusage.ru_maxrss * 1024 . See `man 2 getrusage' for more context.
	ResidentMemory int64 `protobuf:"varint,4,opt,name=resident_memory,json=residentMemory" json:"resident_memory,omitempty"`
	// Verbose, human readable resource usage status. This is roughly what you'd
	// expect to see in /proc/<PID>/status .
	VerboseStatus string `protobuf:"bytes,5,opt,name=verbose_status,json=verboseStatus" json:"verbose_status,omitempty"`
}

func (m *ResourceUsage) Reset()                    { *m = ResourceUsage{} }
func (m *ResourceUsage) String() string            { return proto.CompactTextString(m) }
func (*ResourceUsage) ProtoMessage()               {}
func (*ResourceUsage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ResourceUsage) GetUserTime() *google_protobuf.Duration {
	if m != nil {
		return m.UserTime
	}
	return nil
}

func (m *ResourceUsage) GetSystemTime() *google_protobuf.Duration {
	if m != nil {
		return m.SystemTime
	}
	return nil
}

func (m *ResourceUsage) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ResourceUsage) GetResidentMemory() int64 {
	if m != nil {
		return m.ResidentMemory
	}
	return 0
}

func (m *ResourceUsage) GetVerboseStatus() string {
	if m != nil {
		return m.VerboseStatus
	}
	return ""
}

// A fleetspeak.Message with message type "ResourceUsage" is sent regularly by
// the system and daemon services to the server, to record the performance of
// processes.
type ResourceUsageData struct {
	// Name of the client service that resource usage is charged/attributed to
	// e.g 'system' for the system Fleetspeak service, or the name of a daemon
	// service as specified in its config.
	Scope string `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Pid   int64  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	// Time when the process was started by Fleetspeak.
	ProcessStartTime *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=process_start_time,json=processStartTime" json:"process_start_time,omitempty"`
	ResourceUsage    *ResourceUsage              `protobuf:"bytes,4,opt,name=resource_usage,json=resourceUsage" json:"resource_usage,omitempty"`
}

func (m *ResourceUsageData) Reset()                    { *m = ResourceUsageData{} }
func (m *ResourceUsageData) String() string            { return proto.CompactTextString(m) }
func (*ResourceUsageData) ProtoMessage()               {}
func (*ResourceUsageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResourceUsageData) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *ResourceUsageData) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ResourceUsageData) GetProcessStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ProcessStartTime
	}
	return nil
}

func (m *ResourceUsageData) GetResourceUsage() *ResourceUsage {
	if m != nil {
		return m.ResourceUsage
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceUsage)(nil), "fleetspeak.monitoring.ResourceUsage")
	proto.RegisterType((*ResourceUsageData)(nil), "fleetspeak.monitoring.ResourceUsageData")
}

func init() {
	proto.RegisterFile("fleetspeak/src/common/proto/fleetspeak_monitoring/resource.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x4a, 0xeb, 0x40,
	0x14, 0x80, 0x49, 0x73, 0x7b, 0xb9, 0x99, 0xd2, 0xde, 0x3a, 0x28, 0xc4, 0x2e, 0xb4, 0x14, 0xc5,
	0xae, 0x12, 0xa8, 0x20, 0xe2, 0xca, 0x45, 0x17, 0x82, 0xb8, 0x99, 0xd6, 0x75, 0x48, 0xd3, 0xd3,
	0x10, 0xec, 0xe4, 0x84, 0x39, 0x13, 0xa1, 0x0f, 0xe1, 0xcb, 0xf9, 0x44, 0x92, 0x99, 0xc4, 0x58,
	0x15, 0xba, 0x9b, 0x39, 0xf3, 0x7d, 0xe7, 0x8f, 0x61, 0xf7, 0x9b, 0x2d, 0x80, 0xa6, 0x02, 0xe2,
	0x97, 0x90, 0x54, 0x12, 0x26, 0x28, 0x25, 0xe6, 0x61, 0xa1, 0x50, 0x63, 0xd8, 0xbe, 0x45, 0x12,
	0xf3, 0x4c, 0xa3, 0xca, 0xf2, 0x34, 0x54, 0x40, 0x58, 0xaa, 0x04, 0x02, 0x03, 0xf1, 0x93, 0x96,
	0x0a, 0x5a, 0x6a, 0x74, 0x96, 0x22, 0xa6, 0x5b, 0xb0, 0x99, 0x56, 0xe5, 0x26, 0x5c, 0x97, 0x2a,
	0xd6, 0x19, 0xe6, 0x56, 0x1b, 0x9d, 0x7f, 0x7f, 0xd7, 0x99, 0x04, 0xd2, 0xb1, 0x2c, 0x2c, 0x30,
	0x79, 0xeb, 0xb0, 0xbe, 0xa8, 0x4b, 0x3d, 0x53, 0x9c, 0x02, 0xbf, 0x61, 0x5e, 0x49, 0xa0, 0xa2,
	0x8a, 0xf4, 0x9d, 0xb1, 0x33, 0xed, 0xcd, 0x4e, 0x03, 0x9b, 0x26, 0x68, 0xd2, 0x04, 0xf3, 0xba,
	0x8c, 0xf8, 0x57, 0xb1, 0xcb, 0x4c, 0x02, 0xbf, 0x63, 0x3d, 0xda, 0x91, 0x06, 0x69, 0xcd, 0xce,
	0x21, 0x93, 0x59, 0xda, 0xb8, 0xb7, 0xcc, 0xfb, 0x6c, 0xcc, 0x77, 0x8d, 0x39, 0xfa, 0x61, 0x2e,
	0x1b, 0x42, 0xb4, 0x30, 0xbf, 0x62, 0xff, 0x15, 0x50, 0xb6, 0x86, 0x5c, 0x47, 0x12, 0x24, 0xaa,
	0x9d, 0xff, 0x67, 0xec, 0x4c, 0x5d, 0x31, 0x68, 0xc2, 0x4f, 0x26, 0xca, 0x2f, 0xd9, 0xe0, 0x15,
	0xd4, 0x0a, 0x09, 0x22, 0xd2, 0xb1, 0x2e, 0xc9, 0xef, 0x8e, 0x9d, 0xa9, 0x27, 0xfa, 0x75, 0x74,
	0x61, 0x82, 0x93, 0x77, 0x87, 0x1d, 0xed, 0xed, 0x63, 0x1e, 0xeb, 0x98, 0x1f, 0xb3, 0x2e, 0x25,
	0x58, 0xd8, 0x7d, 0x78, 0xc2, 0x5e, 0xf8, 0x90, 0xb9, 0x45, 0xb6, 0x36, 0x93, 0xba, 0xa2, 0x3a,
	0xf2, 0x07, 0xc6, 0x0b, 0x85, 0x09, 0x10, 0x55, 0x45, 0x94, 0xb6, 0xab, 0x38, 0x3c, 0xd0, 0xb0,
	0xb6, 0x16, 0x95, 0x64, 0x36, 0xf2, 0xc8, 0x06, 0xcd, 0x0f, 0x88, 0xca, 0xaa, 0x0f, 0x33, 0x56,
	0x6f, 0x76, 0x11, 0xfc, 0xfa, 0x11, 0x82, 0xbd, 0x9e, 0x45, 0x5f, 0x7d, 0xbd, 0xae, 0xfe, 0x9a,
	0x92, 0xd7, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x96, 0xf1, 0xdc, 0x44, 0x87, 0x02, 0x00, 0x00,
}
