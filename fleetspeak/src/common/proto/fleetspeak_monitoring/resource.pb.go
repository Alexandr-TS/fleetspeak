// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/common/proto/fleetspeak_monitoring/resource.proto

/*
Package fleetspeak_monitoring is a generated protocol buffer package.

It is generated from these files:
	fleetspeak/src/common/proto/fleetspeak_monitoring/resource.proto

It has these top-level messages:
	AggregatedResourceUsage
	ResourceUsageData
*/
package fleetspeak_monitoring

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Contains resource-usage metrics for Fleetspeak clients. The stats are
// arrived at by aggregating raw data retrieved from the OS.
// CPU-usage is in milliseconds per second, and memory usage is in bytes.
type AggregatedResourceUsage struct {
	MeanUserCpuRate    float64 `protobuf:"fixed64,1,opt,name=mean_user_cpu_rate,json=meanUserCpuRate" json:"mean_user_cpu_rate,omitempty"`
	MaxUserCpuRate     float64 `protobuf:"fixed64,2,opt,name=max_user_cpu_rate,json=maxUserCpuRate" json:"max_user_cpu_rate,omitempty"`
	MeanSystemCpuRate  float64 `protobuf:"fixed64,3,opt,name=mean_system_cpu_rate,json=meanSystemCpuRate" json:"mean_system_cpu_rate,omitempty"`
	MaxSystemCpuRate   float64 `protobuf:"fixed64,4,opt,name=max_system_cpu_rate,json=maxSystemCpuRate" json:"max_system_cpu_rate,omitempty"`
	MeanResidentMemory float64 `protobuf:"fixed64,5,opt,name=mean_resident_memory,json=meanResidentMemory" json:"mean_resident_memory,omitempty"`
	MaxResidentMemory  int64   `protobuf:"varint,6,opt,name=max_resident_memory,json=maxResidentMemory" json:"max_resident_memory,omitempty"`
}

func (m *AggregatedResourceUsage) Reset()                    { *m = AggregatedResourceUsage{} }
func (m *AggregatedResourceUsage) String() string            { return proto.CompactTextString(m) }
func (*AggregatedResourceUsage) ProtoMessage()               {}
func (*AggregatedResourceUsage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AggregatedResourceUsage) GetMeanUserCpuRate() float64 {
	if m != nil {
		return m.MeanUserCpuRate
	}
	return 0
}

func (m *AggregatedResourceUsage) GetMaxUserCpuRate() float64 {
	if m != nil {
		return m.MaxUserCpuRate
	}
	return 0
}

func (m *AggregatedResourceUsage) GetMeanSystemCpuRate() float64 {
	if m != nil {
		return m.MeanSystemCpuRate
	}
	return 0
}

func (m *AggregatedResourceUsage) GetMaxSystemCpuRate() float64 {
	if m != nil {
		return m.MaxSystemCpuRate
	}
	return 0
}

func (m *AggregatedResourceUsage) GetMeanResidentMemory() float64 {
	if m != nil {
		return m.MeanResidentMemory
	}
	return 0
}

func (m *AggregatedResourceUsage) GetMaxResidentMemory() int64 {
	if m != nil {
		return m.MaxResidentMemory
	}
	return 0
}

// A fleetspeak.Message with message type "ResourceUsage" is sent regularly by
// the system and daemon services to the server, to report the performance of
// processes.
type ResourceUsageData struct {
	// Name of the client service that resource usage is charged/attributed to
	// e.g 'system' for the system Fleetspeak service, or the name of a daemon
	// service as specified in its config.
	Scope string `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Pid   int64  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	// Time when the process was started by Fleetspeak.
	ProcessStartTime *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=process_start_time,json=processStartTime" json:"process_start_time,omitempty"`
	// Corresponds to when computation of the resource-usage data was finalized.
	DataTimestamp *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=data_timestamp,json=dataTimestamp" json:"data_timestamp,omitempty"`
	ResourceUsage *AggregatedResourceUsage   `protobuf:"bytes,5,opt,name=resource_usage,json=resourceUsage" json:"resource_usage,omitempty"`
	// Optional debug info for the process.
	DebugStatus string `protobuf:"bytes,6,opt,name=debug_status,json=debugStatus" json:"debug_status,omitempty"`
	// If true, indicates that the process has terminated, and that this is
	// the final resource-usage report for that process.
	ProcessTerminated bool `protobuf:"varint,7,opt,name=process_terminated,json=processTerminated" json:"process_terminated,omitempty"`
}

func (m *ResourceUsageData) Reset()                    { *m = ResourceUsageData{} }
func (m *ResourceUsageData) String() string            { return proto.CompactTextString(m) }
func (*ResourceUsageData) ProtoMessage()               {}
func (*ResourceUsageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResourceUsageData) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *ResourceUsageData) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ResourceUsageData) GetProcessStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ProcessStartTime
	}
	return nil
}

func (m *ResourceUsageData) GetDataTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.DataTimestamp
	}
	return nil
}

func (m *ResourceUsageData) GetResourceUsage() *AggregatedResourceUsage {
	if m != nil {
		return m.ResourceUsage
	}
	return nil
}

func (m *ResourceUsageData) GetDebugStatus() string {
	if m != nil {
		return m.DebugStatus
	}
	return ""
}

func (m *ResourceUsageData) GetProcessTerminated() bool {
	if m != nil {
		return m.ProcessTerminated
	}
	return false
}

func init() {
	proto.RegisterType((*AggregatedResourceUsage)(nil), "fleetspeak.monitoring.AggregatedResourceUsage")
	proto.RegisterType((*ResourceUsageData)(nil), "fleetspeak.monitoring.ResourceUsageData")
}

func init() {
	proto.RegisterFile("fleetspeak/src/common/proto/fleetspeak_monitoring/resource.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xb5, 0x09, 0x2d, 0xd4, 0xa1, 0x21, 0x31, 0x45, 0x44, 0xbd, 0x10, 0x7a, 0x0a, 0x42,
	0xf5, 0xa2, 0xf2, 0x02, 0x54, 0x70, 0xe0, 0xc2, 0xc5, 0x69, 0xce, 0x96, 0xb3, 0x3b, 0x5d, 0xad,
	0xa8, 0xd7, 0x96, 0x3d, 0x96, 0xd2, 0xe7, 0xe2, 0xc9, 0x78, 0x03, 0xe4, 0xd9, 0x4d, 0x96, 0x8d,
	0xa0, 0xb7, 0xf5, 0xfc, 0xdf, 0xfc, 0xab, 0xf9, 0x67, 0xd8, 0x97, 0xfb, 0x07, 0x00, 0x0c, 0x0e,
	0xf4, 0xcf, 0x3c, 0xf8, 0x22, 0x2f, 0xac, 0x31, 0xb6, 0xc9, 0x9d, 0xb7, 0x68, 0xf3, 0x5e, 0x53,
	0xc6, 0x36, 0x35, 0x5a, 0x5f, 0x37, 0x55, 0xee, 0x21, 0xd8, 0xe8, 0x0b, 0x10, 0x04, 0xf1, 0x37,
	0x3d, 0x25, 0x7a, 0xea, 0xf2, 0x5d, 0x65, 0x6d, 0xf5, 0x00, 0xad, 0xd3, 0x36, 0xde, 0xe7, 0x58,
	0x1b, 0x08, 0xa8, 0x8d, 0x6b, 0xfb, 0xae, 0x7e, 0x8d, 0xd8, 0xdb, 0xdb, 0xaa, 0xf2, 0x50, 0x69,
	0x84, 0x52, 0x76, 0xa6, 0x9b, 0xa0, 0x2b, 0xe0, 0x1f, 0x19, 0x37, 0xa0, 0x1b, 0x15, 0x03, 0x78,
	0x55, 0xb8, 0xa8, 0xbc, 0x46, 0x58, 0x64, 0xcb, 0x6c, 0x95, 0xc9, 0x57, 0x49, 0xd9, 0x04, 0xf0,
	0x5f, 0x5d, 0x94, 0x1a, 0x81, 0x7f, 0x60, 0x73, 0xa3, 0x77, 0x47, 0xec, 0x88, 0xd8, 0xa9, 0xd1,
	0xbb, 0xbf, 0xd1, 0x9c, 0x5d, 0x90, 0x6f, 0x78, 0x0c, 0x08, 0xa6, 0xa7, 0xc7, 0x44, 0xcf, 0x93,
	0xb6, 0x26, 0x69, 0xdf, 0x70, 0xcd, 0x5e, 0x27, 0xef, 0x63, 0xfe, 0x19, 0xf1, 0x33, 0xa3, 0x77,
	0x43, 0xfc, 0x53, 0xe7, 0xef, 0x21, 0xd4, 0x25, 0x34, 0xa8, 0x0c, 0x18, 0xeb, 0x1f, 0x17, 0x27,
	0xc4, 0xd3, 0x4c, 0xb2, 0x93, 0x7e, 0x90, 0xc2, 0x45, 0xfb, 0x83, 0xe3, 0x86, 0xd3, 0x65, 0xb6,
	0x1a, 0xcb, 0x34, 0xd7, 0x90, 0xbf, 0xfa, 0x3d, 0x62, 0xf3, 0x41, 0x56, 0xdf, 0x34, 0x6a, 0x7e,
	0xc1, 0x4e, 0x42, 0x61, 0x5d, 0x1b, 0xd1, 0x99, 0x6c, 0x1f, 0x7c, 0xc6, 0xc6, 0xae, 0x2e, 0x29,
	0x8a, 0xb1, 0x4c, 0x9f, 0xfc, 0x3b, 0xe3, 0xce, 0xdb, 0x02, 0x42, 0x50, 0x01, 0xb5, 0x47, 0x95,
	0x96, 0x42, 0xd3, 0x4f, 0x6e, 0x2e, 0x45, 0xbb, 0x31, 0xb1, 0xdf, 0x98, 0xb8, 0xdb, 0x6f, 0x4c,
	0xce, 0xba, 0xae, 0x75, 0x6a, 0x4a, 0x65, 0x7e, 0xcb, 0xa6, 0xa5, 0x46, 0xad, 0x0e, 0x5b, 0xa5,
	0x4c, 0x9e, 0x76, 0x39, 0x4f, 0x1d, 0x87, 0x27, 0xdf, 0xb0, 0xe9, 0xfe, 0x94, 0x54, 0x4c, 0xa3,
	0x50, 0x4c, 0x93, 0x1b, 0x21, 0xfe, 0x79, 0x51, 0xe2, 0x3f, 0xc7, 0x22, 0xcf, 0xfd, 0xe0, 0x76,
	0xde, 0xb3, 0x97, 0x25, 0x6c, 0x63, 0x95, 0x26, 0xc4, 0x18, 0x28, 0xca, 0x33, 0x39, 0xa1, 0xda,
	0x9a, 0x4a, 0xfc, 0xba, 0x8f, 0x01, 0xc1, 0x9b, 0xba, 0x49, 0xa6, 0x8b, 0xe7, 0xcb, 0x6c, 0xf5,
	0x42, 0xce, 0x3b, 0xe5, 0xee, 0x20, 0x6c, 0x4f, 0x69, 0x96, 0xcf, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xf3, 0xd1, 0x71, 0x86, 0x2c, 0x03, 0x00, 0x00,
}
